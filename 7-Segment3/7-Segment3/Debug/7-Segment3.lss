
7-Segment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001d2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0c  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000877  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000369  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000018dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042d  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a8  00000000  00000000  00001d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ff9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	54 d0       	rcall	.+168    	; 0x15c <main>
  b4:	8c c0       	rjmp	.+280    	; 0x1ce <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <segment>:

unsigned char font[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7c, 0x07,
0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71, 0x08, 0x80};

void segment(int n)
{
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
	unsigned char N1000, N100, N10, N1;
	int buff;
	
	N1000 = n / 1000; //1000의 자리
  c0:	68 ee       	ldi	r22, 0xE8	; 232
  c2:	73 e0       	ldi	r23, 0x03	; 3
  c4:	5d d0       	rcall	.+186    	; 0x180 <__divmodhi4>
  c6:	8b 01       	movw	r16, r22
	buff = n % 1000;
	N100 = buff / 100; //100의 자리
  c8:	64 e6       	ldi	r22, 0x64	; 100
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	59 d0       	rcall	.+178    	; 0x180 <__divmodhi4>
  ce:	eb 01       	movw	r28, r22
	buff = buff % 100;
	N10 = buff / 10; //10의 자리
	N1 = buff % 10; //1의 자리
  d0:	6a e0       	ldi	r22, 0x0A	; 10
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	55 d0       	rcall	.+170    	; 0x180 <__divmodhi4>
	
	for (int i = 0; i < 30; i++)
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	38 c0       	rjmp	.+112    	; 0x14c <segment+0x94>
	{
		PORTG = 0x0e; //1
  dc:	e5 e6       	ldi	r30, 0x65	; 101
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	4e e0       	ldi	r20, 0x0E	; 14
  e2:	40 83       	st	Z, r20
		PORTB = font[N1000];
  e4:	d8 01       	movw	r26, r16
  e6:	bb 27       	eor	r27, r27
  e8:	a0 50       	subi	r26, 0x00	; 0
  ea:	bf 4f       	sbci	r27, 0xFF	; 255
  ec:	4c 91       	ld	r20, X
  ee:	48 bb       	out	0x18, r20	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	a6 e6       	ldi	r26, 0x66	; 102
  f2:	be e0       	ldi	r27, 0x0E	; 14
  f4:	11 97       	sbiw	r26, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <segment+0x3c>
  f8:	00 00       	nop
		_delay_ms(1);
		
		PORTG = 0x0d; //2
  fa:	4d e0       	ldi	r20, 0x0D	; 13
  fc:	40 83       	st	Z, r20
		PORTB = font[N100];
  fe:	de 01       	movw	r26, r28
 100:	bb 27       	eor	r27, r27
 102:	a0 50       	subi	r26, 0x00	; 0
 104:	bf 4f       	sbci	r27, 0xFF	; 255
 106:	4c 91       	ld	r20, X
 108:	48 bb       	out	0x18, r20	; 24
 10a:	a6 e6       	ldi	r26, 0x66	; 102
 10c:	be e0       	ldi	r27, 0x0E	; 14
 10e:	11 97       	sbiw	r26, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <segment+0x56>
 112:	00 00       	nop
		_delay_ms(1);
		
		PORTG = 0x0b; //3
 114:	4b e0       	ldi	r20, 0x0B	; 11
 116:	40 83       	st	Z, r20
		PORTB = font[N10];
 118:	db 01       	movw	r26, r22
 11a:	bb 27       	eor	r27, r27
 11c:	a0 50       	subi	r26, 0x00	; 0
 11e:	bf 4f       	sbci	r27, 0xFF	; 255
 120:	4c 91       	ld	r20, X
 122:	48 bb       	out	0x18, r20	; 24
 124:	a6 e6       	ldi	r26, 0x66	; 102
 126:	be e0       	ldi	r27, 0x0E	; 14
 128:	11 97       	sbiw	r26, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <segment+0x70>
 12c:	00 00       	nop
		_delay_ms(1);
		
		PORTG = 0x07; //4
 12e:	47 e0       	ldi	r20, 0x07	; 7
 130:	40 83       	st	Z, r20
		PORTB = font[N1];
 132:	fc 01       	movw	r30, r24
 134:	ff 27       	eor	r31, r31
 136:	e0 50       	subi	r30, 0x00	; 0
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	40 81       	ld	r20, Z
 13c:	48 bb       	out	0x18, r20	; 24
 13e:	e6 e6       	ldi	r30, 0x66	; 102
 140:	fe e0       	ldi	r31, 0x0E	; 14
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <segment+0x8a>
 146:	00 00       	nop
	N100 = buff / 100; //100의 자리
	buff = buff % 100;
	N10 = buff / 10; //10의 자리
	N1 = buff % 10; //1의 자리
	
	for (int i = 0; i < 30; i++)
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	2e 31       	cpi	r18, 0x1E	; 30
 14e:	31 05       	cpc	r19, r1
 150:	2c f2       	brlt	.-118    	; 0xdc <segment+0x24>
		
		PORTG = 0x07; //4
		PORTB = font[N1];
		_delay_ms(1);
	}
}
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <main>:


int main(void)
{
	/* Replace with your application code */
	DDRB = 0xff;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	87 bb       	out	0x17, r24	; 23
	DDRG = 0x0f;
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	int count = 0;
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <main+0x14>
	{
		segment(count);
		count++;
		if(count == 9999)
		{
			count = 0;
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
	DDRG = 0x0f;
	
	int count = 0;
	while(1)
	{
		segment(count);
 170:	ce 01       	movw	r24, r28
 172:	a2 df       	rcall	.-188    	; 0xb8 <segment>
		count++;
 174:	21 96       	adiw	r28, 0x01	; 1
		if(count == 9999)
 176:	cf 30       	cpi	r28, 0x0F	; 15
 178:	87 e2       	ldi	r24, 0x27	; 39
 17a:	d8 07       	cpc	r29, r24
 17c:	c9 f7       	brne	.-14     	; 0x170 <main+0x14>
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <main+0x10>

00000180 <__divmodhi4>:
 180:	97 fb       	bst	r25, 7
 182:	07 2e       	mov	r0, r23
 184:	16 f4       	brtc	.+4      	; 0x18a <__divmodhi4+0xa>
 186:	00 94       	com	r0
 188:	06 d0       	rcall	.+12     	; 0x196 <__divmodhi4_neg1>
 18a:	77 fd       	sbrc	r23, 7
 18c:	08 d0       	rcall	.+16     	; 0x19e <__divmodhi4_neg2>
 18e:	0b d0       	rcall	.+22     	; 0x1a6 <__udivmodhi4>
 190:	07 fc       	sbrc	r0, 7
 192:	05 d0       	rcall	.+10     	; 0x19e <__divmodhi4_neg2>
 194:	3e f4       	brtc	.+14     	; 0x1a4 <__divmodhi4_exit>

00000196 <__divmodhi4_neg1>:
 196:	90 95       	com	r25
 198:	81 95       	neg	r24
 19a:	9f 4f       	sbci	r25, 0xFF	; 255
 19c:	08 95       	ret

0000019e <__divmodhi4_neg2>:
 19e:	70 95       	com	r23
 1a0:	61 95       	neg	r22
 1a2:	7f 4f       	sbci	r23, 0xFF	; 255

000001a4 <__divmodhi4_exit>:
 1a4:	08 95       	ret

000001a6 <__udivmodhi4>:
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	51 e1       	ldi	r21, 0x11	; 17
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <__udivmodhi4_ep>

000001ae <__udivmodhi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	a6 17       	cp	r26, r22
 1b4:	b7 07       	cpc	r27, r23
 1b6:	10 f0       	brcs	.+4      	; 0x1bc <__udivmodhi4_ep>
 1b8:	a6 1b       	sub	r26, r22
 1ba:	b7 0b       	sbc	r27, r23

000001bc <__udivmodhi4_ep>:
 1bc:	88 1f       	adc	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	5a 95       	dec	r21
 1c2:	a9 f7       	brne	.-22     	; 0x1ae <__udivmodhi4_loop>
 1c4:	80 95       	com	r24
 1c6:	90 95       	com	r25
 1c8:	bc 01       	movw	r22, r24
 1ca:	cd 01       	movw	r24, r26
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
